---
- name: Create Terraform Infrastructure on AWS

  hosts: all
  connection: local
  
  vars_prompt:

  - name: aws_region
    prompt: AWS region to deploy
    default: "eu-central-1"
    private: false

  vars:
    
    backend_bucket: "tfstate-vmon-{{ ansible_facts.date_time.epoch }}"
    meta_bucket: "meta-vmon-{{ ansible_facts.date_time.epoch }}"
    grafana_user: "admin"
    grafana_password: "admin"
    grafana_geo: "https://{{ meta_bucket }}.s3.{{ aws_region }}.amazonaws.com/geo.json"
    grafana_base: "https://{{ meta_bucket }}.s3.{{ aws_region }}.amazonaws.com/logo_base.svg"
    grafana_alert: "https://{{ meta_bucket }}.s3.{{ aws_region }}.amazonaws.com/logo_alert.svg"

  tasks:

    - name: Check if public key file exists
      stat:
        path: keys/aws_linux.pub
      register: stat_result

    - name: Stop if the public key is not found
      ansible.builtin.fail:
        msg: "keys/aws_linux.pub is missing"
      when: not stat_result.stat.exists

    #- debug:
    #    msg: "S3_backend_bucket: {{ backend_bucket }}, aws_region: {{ aws_region }}, S3_meta_bucket: {{ meta_bucket }}"
  
    - name: Print deployment variables to file
      ansible.builtin.copy:
        content: {
          "aws_region": "{{ aws_region }}",
          "backend_bucket": "{{ backend_bucket }}",
          "meta_bucket": "{{ meta_bucket }}"
          }
        dest: ansible-state.json

    - name: Create S3 bucket 
      amazon.aws.s3_bucket:
        name: "{{ backend_bucket }}"
        state: present
        versioning: on
        region: "{{ aws_region }}"
      register: created_bucket 
  
    - name: Create DDB table
      community.aws.dynamodb_table:
        name: tfstate-lock-vmon
        state: present
        hash_key_name: LockID
        region: "{{ aws_region }}"
      register: created_ddb_table

    - name: Update S3 bucket policy
      command: sed -i'' -e 's,META_BUCKET,{{ meta_bucket }},g' policies/s3_bucketPolicy.json

    - name: Initialize Terraform
      command: terraform init -backend-config="bucket={{ backend_bucket }}" -backend-config="region={{ aws_region }}"
      register: initialized_terraform
  
    - name: Create execution plan
      command: terraform plan -var="meta_bucket={{ meta_bucket }}" -var="region={{ aws_region }}" -out="tfplan" 
      register: created_tfplan
  
    - name: Deploy the planned configuration
      command: terraform apply --auto-approve "tfplan" 
      register: infrastructure_deployed
    
    #- debug:
    #    var: infrastructure_deployed.stdout_lines[-1] | regex_search('\d+.\d+.\d+.\d+')

    - name: Extract host IP address from the Terraform output
      ansible.builtin.set_fact:
        host_ip_address: "{{ infrastructure_deployed.stdout_lines[-1] | regex_search('\\d+.\\d+.\\d+.\\d+') }}"
    
    - name: Set Grafana URL
      ansible.builtin.set_fact:
        grafana_url: "http://{{ host_ip_address }}/graf"

    - name: Waiting for 90 seconds for the VM to be booted up..
      ansible.builtin.wait_for:
        timeout: 90 # Sleep for 90 seconds
    
    - name: Retrying until the VM is booted up. This may take a moment, ignore transient failures..
      uri:
        url: "{{ grafana_url }}"
        return_content: yes
        validate_certs: no
        status_code:
          - 200
      until: uri_output.status == 200
      delay: 5 # Every 5 seconds
      retries: 18 # Retries for another 90 seconds
      register: uri_output

    - name: Create Grafana Datasource
      community.grafana.grafana_datasource:
        grafana_url: "{{ grafana_url }}"
        grafana_user: "{{ grafana_user }}"
        grafana_password: "{{ grafana_password }}"
        state: present
        name: prometheus
        ds_type: "prometheus"
        ds_url: http://prometheus:9090/prom
        is_default: true
        uid: prometheusdatasource

    - name: Import Dashboard - Sys Charts
      community.grafana.grafana_dashboard:
        grafana_url: "{{ grafana_url }}"
        grafana_user: "{{ grafana_user }}"
        grafana_password: "{{ grafana_password }}"
        state: present
        path: configs/grafana/dashboard_syscharts.json
        overwrite: true
    
    - name: Update Dashboard Configuration - I
      command: sed -i'' -e 's,GEO_FILE,{{ grafana_geo }},g' configs/grafana/dashboard_worldmap.json
    
    - name: Update Dashboard Configuration - II
      command: sed -i'' -e 's,LOGO_BASE,{{ grafana_base }},g' configs/grafana/dashboard_worldmap.json

    - name: Update Dashboard Configuration - III
      command: sed -i'' -e 's,LOGO_ALERT,{{ grafana_alert }},g' configs/grafana/dashboard_worldmap.json

    - name: Import Dashboard - World Map
      community.grafana.grafana_dashboard:
        grafana_url: "{{ grafana_url }}"
        grafana_user: "{{ grafana_user }}"
        grafana_password: "{{ grafana_password }}"
        state: present
        path: configs/grafana/dashboard_worldmap.json
        overwrite: true

    - debug: 
        msg: 
          - "World Map Dashboard:    http://{{ host_ip_address }}/map"
          - "Sys Charts Dashboard:   http://{{ host_ip_address }}/charts"
          - "Grafana Homepage:       http://{{ host_ip_address }}/graf"
          - "Prometheus Homepage:    http://{{ host_ip_address }}/prom"