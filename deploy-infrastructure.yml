---
- name: Create Terraform Infrastructure on AWS

  hosts: all
  connection: local
  
  vars_prompt:

  - name: aws_region
    prompt: AWS region to deploy
    default: "eu-central-1"
    private: false

  vars:
    
    backend_bucket: "tfstate-vmon-{{ ansible_facts.date_time.epoch }}"
    content_bucket: "content-vmon-{{ ansible_facts.date_time.epoch }}"
    grafana_user: "admin"
    grafana_password: "admin"
    grafana_geo: "https://{{ content_bucket }}.s3.{{ aws_region }}.amazonaws.com/geo.json"
    grafana_logo: "https://{{ content_bucket }}.s3.{{ aws_region }}.amazonaws.com/logo_circle_base.svg"
  
  tasks:

    - debug:
        msg: "S3_backend_bucket: {{ backend_bucket }}, aws_region: {{ aws_region }}, S3_content_bucket: {{ content_bucket }}"
  
    - name: Create S3 bucket 
      amazon.aws.s3_bucket:
        name: "{{ backend_bucket }}"
        state: present
        versioning: on
        region: "{{ aws_region }}"
      register: created_bucket 
  
    - name: Create DDB table
      community.aws.dynamodb_table:
        name: tfstate-lock-vmon
        state: present
        hash_key_name: LockID
        region: "{{ aws_region }}"
      register: created_ddb_table
  
    - name: Initialize Terraform
      command: terraform init -backend-config="bucket={{ backend_bucket }}" -backend-config="region={{ aws_region }}"
      register: initialized_terraform
  
    - name: Create execution plan
      command: terraform plan -var="region={{ aws_region }}" -out="tfplan" 
      register: created_tfplan
  
    - name: Deploy the planned configuration
      command: terraform apply --auto-approve "tfplan" 
      register: infrastructure_deployed
    
    #- debug:
    #    var: infrastructure_deployed.stdout_lines[-1] | regex_search('\d+.\d+.\d+.\d+')

    - name: Extract host IP address from the Terraform output
      ansible.builtin.set_fact:
        host_ip_address: "{{ infrastructure_deployed.stdout_lines[-1] | regex_search('\\d+.\\d+.\\d+.\\d+') }}"
        grafana_url: "http://{{ host_ip_address }}/graf"

    - name: Waiting for 90 seconds until the VM is booted up..
      ansible.builtin.wait_for:
        timeout: 90 # Sleep for 90 seconds
    
    - name: Retrying until the VM is booted up. This may take a moment, ignore transient failures..
      uri:
        url: "{{ grafana_url }}"
        return_content: yes
        validate_certs: no
        status_code:
          - 200
      until: uri_output.status == 200
      delay: 5 # Every 5 seconds
      retries: 18 # Retries for another 90 seconds
      register: uri_output

    - name: Create Grafana Datasource
      community.grafana.grafana_datasource:
        grafana_url: "{{ grafana_url }}"
        grafana_user: "{{ grafana_user }}"
        grafana_password: "{{ grafana_password }}"
        state: present
        name: prometheus
        ds_type: "prometheus"
        ds_url: http://prometheus:9090/prom
        is_default: true
        uid: prometheusdatasource

    - name: Import Sys Charts
      community.grafana.grafana_dashboard:
        grafana_url: "{{ grafana_url }}"
        grafana_user: "{{ grafana_user }}"
        grafana_password: "{{ grafana_password }}"
        state: present
        path: configs/grafana/dashboard_syscharts.json
        overwrite: true
    
    - name: Prepare World Map 
      shell: 
        sed -i 's/GEO_FILE/{{ grafana_geo }}/g' configs/grafana/dashboard_worldmap.json
        sed -i 's/LOGO_FILE/{{ grafana_logo }}/g' configs/grafana/dashboard_worldmap.json

    - name: Import World Map
      community.grafana.grafana_dashboard:
        grafana_url: "{{ grafana_url }}"
        grafana_user: "{{ grafana_user }}"
        grafana_password: "{{ grafana_password }}"
        state: present
        path: configs/grafana/dashboard_worldmap.json
        overwrite: true

    - debug: 
        msg: 
          - "http://{{ host_ip_address }}/prom"
          - "http://{{ host_ip_address }}/graf"
